Create a Python implementation of an async function for Google Calendar event creation using the `AssistantFnc` class. The function should:
1. Use type annotations with descriptions provided via `llm.TypeInfo`.
2. Accept the following parameters:
   - `start_datetime` (str): Start date and time of the event.
   - `event_duration` (str): Duration of the event in a format like '3h30m'.
   - `description` (Optional[str]): An optional description of the event.
   - `eventType` (EventType Enum): A type of event with options like `default`, `outOfOffice`, etc. The input should validate string values by converting them to Enum instances.
   - `recurrence` (Optional[list[str]]): A list of recurrence rules for the event.
   - `timezone` (Optional[str]): The timezone of the event.
   - `guests_can_modify` (bool): Whether guests can modify the event.
   - `attendees` (Optional[list[str]]): A list of attendees' email addresses.
   - `send_updates` (Optional[bool]): Whether to send updates to the attendees.
   - `calendar_id` (str): ID of the Google Calendar to interact with, defaulting to "primary".
3. Convert `eventType` from a string to the `EventType` Enum if needed and raise an error for invalid values.
4. Log relevant information using a logger.
5. Return the prepared event data with a "success" status.

Include the following:
- The `EventType` Enum definition.
- Proper error handling for invalid Enum values.
- Logging for both info and debug levels.
- A usage example showing how to call the function.

The implementation should be clean, readable, and follow Python best practices.
example :


from venv import logger
import aiohttp
from typing import Annotated, List, Optional

from livekit.agents import llm
from livekit.agents.pipeline import VoicePipelineAgent
from livekit.agents.multimodal import MultimodalAgent
from enum import Enum
from typing import Annotated, List, Optional
# Define EventType Enum
class EventType(str, Enum):
    default = "default"
    outOfOffice = "outOfOffice"
    focusTime = "focusTime"
    workingLocation = "workingLocation"

class AssistantFnc(llm.FunctionContext):
    @llm.ai_callable()
    async def create_google_calendar_event(
        self,
        start_datetime: Annotated[
            str, llm.TypeInfo(description="Start date and time of the event.")
        ],
        event_duration: Annotated[
            str, llm.TypeInfo(description="Duration of the meeting event, e.g., '3h30m', '2h', '20m'.")
        ],
        description: Annotated[
            Optional[str], llm.TypeInfo(description="Description of the event. Can contain HTML. Optional.")
        ] = None,
        eventType: Annotated[
            EventType, llm.TypeInfo(description="Type of the event, immutable post-creation.")
        ] = EventType.default,
        recurrence: Annotated[
            Optional[list[str]],
            llm.TypeInfo(description="List of recurrence rules for the event.")
        ] = None,
        timezone: Annotated[
            Optional[str], llm.TypeInfo(description="Timezone of the event. Example: 'America/New_York'.")
        ] = None,
        guests_can_modify: Annotated[
            bool, llm.TypeInfo(description="Indicates whether guests can modify the event.")
        ] = False,
        attendees: Annotated[
            Optional[list[str]],
            llm.TypeInfo(description="List of emails of attendees for the event.")
        ] = None,
        send_updates: Annotated[
            Optional[bool], llm.TypeInfo(description="Whether to send updates to the attendees.")
        ] = None,
        calendar_id: Annotated[
            str, llm.TypeInfo(description="The ID of the Google Calendar. `primary` for interacting with the primary calendar.")
        ] = "primary",
    ):
        """Create a new event in a Google Calendar."""
        # Ensure eventType is an EventType instance
        if isinstance(eventType, str):
            try:
                eventType = EventType(eventType)
            except ValueError:
                raise ValueError(f"Invalid eventType: {eventType}. Must be one of {[e.value for e in EventType]}")
        
        logger.info(f"Creating an event in the calendar {calendar_id}")
        
        # Prepare event data
        event_data = {
            "start_datetime": start_datetime,
            "event_duration": event_duration,
            "description": description,
            "eventType": eventType.value,
            "recurrence": recurrence,
            "timezone": timezone,
            "guests_can_modify": guests_can_modify,
            "attendees": attendees,
            "send_updates": send_updates,
            "calendar_id": calendar_id,
        }
        
        logger.debug(f"Event data: {event_data}")
        return {"status": "success", "event_data": event_data}
